generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(cuid())
  email           String        @unique
  password        String
  firstName       String
  lastName        String
  role            UserRole      @default(DEVELOPER)
  bio             String?
  avatar          String?
  avatarFileName  String?
  avatarFileSize  Int?
  resume          String?
  resumeFileName  String?
  resumeFileSize  Int?
  resumeFileType  String?
  location        String?
  skills          String[]
  experience      String?
  education       String?
  website         String?
  github          String?
  linkedin        String?
  phone           String?
  isProfilePublic Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  applications    Application[]
  company         Company?      @relation("CompanyOwner")
  jobsPosted      Job[]         @relation("JobPoster")

  @@map("users")
}

model Company {
  id           String   @id @default(cuid())
  name         String
  description  String?
  logo         String?
  logoFileName String?
  logoFileSize Int?
  logoFileType String?
  website      String?
  location     String?
  industry     String?
  size         String?
  founded      Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ownerId      String   @unique
  owner        User     @relation("CompanyOwner", fields: [ownerId], references: [id])
  jobs         Job[]    @relation("CompanyJobs")

  @@map("companies")
}

model Job {
  id               String          @id @default(cuid())
  title            String
  description      String
  requirements     String[]
  responsibilities String[]
  salary           Json?
  location         String
  type             JobType
  experience       ExperienceLevel
  skills           String[]
  benefits         String[]
  companyName      String
  companyLogo      String?
  isRemote         Boolean         @default(false)
  isActive         Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  postedById       String
  companyId        String?
  applications     Application[]
  company          Company?        @relation("CompanyJobs", fields: [companyId], references: [id])
  postedBy         User            @relation("JobPoster", fields: [postedById], references: [id])

  @@map("jobs")
}

model Application {
  id              String            @id @default(cuid())
  status          ApplicationStatus @default(PENDING)
  coverLetter     String?
  resume          String?
  resumeFileName  String?
  resumeFileSize  Int?
  resumeFileType  String?
  portfolio       String?
  coverLetterFile String?
  appliedAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  jobId           String
  applicantId     String
  applicant       User              @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  job             Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId, applicantId])
  @@map("applications")
}

enum UserRole {
  DEVELOPER
  EMPLOYER
  ADMIN
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum ExperienceLevel {
  ENTRY
  JUNIOR
  MID
  SENIOR
  LEAD
  EXECUTIVE
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  INTERVIEWING
  ACCEPTED
  REJECTED
  WITHDRAWN
}
